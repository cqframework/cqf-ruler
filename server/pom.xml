<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.opencds.cqf.ruler</groupId>
		<artifactId>cqf-ruler</artifactId>
		<version>0.15.0-SNAPSHOT</version>
	</parent>

	<artifactId>cqf-ruler-server</artifactId>
	<packaging>war</packaging>

	<dependencies>

		<!-- This example uses H2 embedded database. If you are using another database such as Mysql or Oracle, you may omit the following dependencies and replace them with an appropriate database client
            dependency for your database platform. -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.214</version>
		</dependency>
		<!--
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		-->
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>

		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<!-- You may not need this if you are deploying to an application server which provides database connection pools itself. -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>websocket-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>websocket-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-core</artifactId>
			<version>0.15.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- Used for CORS support -->
		<!-- Spring Web is used to deploy the server to a web container. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
		</dependency>

		<!-- The following dependencies are only needed for automated unit tests, you do not neccesarily need them to run the example. -->
		<!-- <dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-test</artifactId>
			<version>0.5.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlets</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>websocket-server</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-util</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-test-utilities</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency> -->

		<!-- optional dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- If you are using HAPI narrative generation, you will need to include Thymeleaf as well. Otherwise the following can be omitted. -->
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf</artifactId>
		</dependency>

		<!-- webjars -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>Eonasdan-bootstrap-datetimepicker</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>font-awesome</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jstimezonedetect</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>select2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>awesome-bootstrap-checkbox</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>jquery</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>moment</artifactId>
		</dependency>

		<dependency>
			<groupId>org.yaml</groupId>
			<artifactId>snakeyaml</artifactId>
		</dependency>
		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-jpaserver-subscription</artifactId>
			<version>${hapi_version}</version>
		</dependency>
		<dependency>
			<groupId>org.simplejavamail</groupId>
			<artifactId>simple-java-mail</artifactId>
			<exclusions>
				<exclusion>
					<groupId>jakarta.annotation</groupId>
					<artifactId>jakarta.annotation-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- This dependency is used for the "FHIR Tester" web app overlay -->
		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-testpage-overlay</artifactId>
			<type>war</type>
			<scope>provided</scope>
		</dependency>

		<!--
        For some reason JavaDoc crashed during site generation unless we have this dependency
        -->
		<dependency>
			<groupId>javax.interceptor</groupId>
			<artifactId>javax.interceptor-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for JEE/Servlet support -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-case-reporting</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-cds-hooks</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-cpg</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-cr</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-dev-tools</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>

		<!-- runtime only dependencies for developing plugins -->
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-ra</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-sdc</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.opencds.cqf.ruler</groupId>
			<artifactId>cqf-ruler-security</artifactId>
			<version>0.15.0-SNAPSHOT</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring_boot_version}</version>
				<configuration>
					<addResources>true</addResources>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<mainClass>org.opencds.cqf.ruler.Application</mainClass>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- The following is not required for the application to build, but allows you to test it by issuing "mvn package jetty:run -Dspring.batch.job.enabled=false" from the command line. -->

			<!-- <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <webApp>
                        <contextPath>/cqf-ruler</contextPath>
                        <allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
                    </webApp>
                </configuration>
            </plugin> -->

			<!-- The configuration here tells the WAR plugin to include the FHIR Tester overlay. You can omit it if you are not using that feature. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archive>
						<manifestEntries>
							<Build-Time>${maven.build.timestamp}</Build-Time>
						</manifestEntries>
					</archive>
					<overlays>
						<overlay>
							<groupId>ca.uhn.hapi.fhir</groupId>
							<artifactId>hapi-fhir-testpage-overlay</artifactId>
						</overlay>
					</overlays>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- <plugin>
                <groupId>org.basepom.maven</groupId>
                <artifactId>duplicate-finder-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <inherited>true</inherited>
                    </execution>
                </executions>
                <configuration>
                    <failBuildInCaseOfConflict>false</failBuildInCaseOfConflict>
                    <checkTestClasspath>false</checkTestClasspath> -->
			<!--
                    <printEqualFiles>false</printEqualFiles>
                    <failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>
                    <failBuildInCaseOfEqualContentConflict>true</failBuildInCaseOfEqualContentConflict>
                    <failBuildInCaseOfConflict>true</failBuildInCaseOfConflict>
                    <checkCompileClasspath>true</checkCompileClasspath>
                    <checkRuntimeClasspath>false</checkRuntimeClasspath>
                    <skip>false</skip>
                    <quiet>false</quiet>
                    <preferLocal>true</preferLocal>
                    <useResultFile>true</useResultFile>
                    <resultFileMinClasspathCount>2</resultFileMinClasspathCount>
                    <resultFile>${project.build.directory}/duplicate-finder-result.xml</resultFile>
                    -->
			<!--
                    <ignoredDependencies>
                        <dependency>
                            <groupId>javax.el</groupId>
                            <artifactId>javax.el-api</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>javax.mail</groupId>
                            <artifactId>javax.mail-api</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>javax.activation</groupId>
                            <artifactId>javax.activation-api</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>com.helger</groupId>
                            <artifactId>ph-schematron</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>commons-logging</groupId>
                            <artifactId>commons-logging</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.jscience</groupId>
                            <artifactId>jscience</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-jcl</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-jcl</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>com.google.code.findbugs</groupId>
                            <artifactId>annotations</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.apache.derby</groupId>
                            <artifactId>derbyclient</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.apache.derby</groupId>
                            <artifactId>derbynet</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.apache.derby</groupId>
                            <artifactId>derbyclient</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.checkerframework</groupId>
                            <artifactId>checker-compat-qual</artifactId>
                        </dependency>
                    </ignoredDependencies>
                    -->
			<!-- <ignoredResourcePatterns>
                        <ignoredResourcePattern>.*\.txt$</ignoredResourcePattern>
                        <ignoredResourcePattern>.*\.html$</ignoredResourcePattern>
                        <ignoredResourcePattern>config/favicon.ico</ignoredResourcePattern>
                    </ignoredResourcePatterns>
                </configuration> -->
			<!-- </plugin> -->
		</plugins>
	</build>

	<profiles>
		<!-- Package the war for your preference. Use the boot profile if you prefer a single jar/war
        that can be started with and embedded application server. Default is jetty as it is assumed
        that the main users of this project already have an app server.
        Different profiles are needed as packing it for spring boot, makes the resulting war undeployable
        due to a class shading issue between tomcat and jetty.
        (the error is 'java.util.ServiceConfigurationError: org.apache.juli.logging.Log: org.eclipse.jetty.apache.jsp.JuliLog not a subtype')
         -->

		<!-- example of how to start the server using spring boot-->
		<!-- mvn clean package && java -jar target/cqf-ruler-server.war -->

		<!-- Use the boot profile for development and debugging options when using your IDE -->
		<profile>
			<id>boot</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
